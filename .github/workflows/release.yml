on:
  push:
    # Sequence of patterns matched against refs/tags
    #tags:
    #  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create docker container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
             echo Add secrets DOCKERHUB_USERNAME DOCKERHUB_PASSWORD at https://github.com/tjacobs/openmiko/settings/secrets/actions

      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})

      - name: Build the tagged Docker image
        run: docker build . --file Dockerfile --tag openmiko/openmiko:${{steps.vars.outputs.tag}}

      - name: Push the tagged Docker image
        run: docker push openmiko/openmiko:${{steps.vars.outputs.tag}}

      - name: Tag image as latest
        run: docker tag openmiko/openmiko:${{steps.vars.outputs.tag}} openmiko/openmiko:latest

      - name: Push the latest Docker image
        run: docker push openmiko/openmiko:latest
  release:
    name: Create a release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})

      - name: Copy openmiko_firmware.bin out of container
        run: docker run --rm --entrypoint cat openmiko/openmiko:${{steps.vars.outputs.tag}} /src/release/openmiko_firmware.bin > /tmp/openmiko_firmware.bin

      - name: Copy rootfs.jffs2 out of container
        run: docker run --rm --entrypoint cat openmiko/openmiko:${{steps.vars.outputs.tag}} /src/release/rootfs.jffs2 > /tmp/rootfs.jffs2

      - name: Copy uImage.lzma (kernel) out of container
        run: docker run --rm --entrypoint cat openmiko/openmiko:${{steps.vars.outputs.tag}} /src/release/uImage.lzma > /tmp/uImage.lzma

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            This is an automated release based on commit ${{steps.vars.outputs.tag}}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /tmp/openmiko_firmware.bin
          asset_name: openmiko_firmware.bin
          asset_content_type: application/octet-stream

      - name: Upload RootFS Image
        id: upload-rootfs-image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/rootfs.jffs2
          asset_name: rootfs.jffs2
          asset_content_type: application/octet-stream

      - name: Upload Kernel Image
        id: upload-kernel-image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/uImage.lzma
          asset_name: uImage.lzma
          asset_content_type: application/octet-stream          
